apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "org.bbs.android.log.sample"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        applicationVariants.all { variant ->
            println "name: " + variant.name
            println "baseName: " + variant.baseName
            println "outputs: " + variant.outputs

            variant.outputs.each { output ->
                def formattedDate = new Date().format('yyyyMMddhhmm')
                output.outputFile =
                        new File(output.outputFile.parent,
                                output.outputFile.name.replaceAll(".apk", "_V" + versionName.replaceAll("\\.", "_") + "_D" + formattedDate + ".apk"))
                println "output:" + output

                println "outputFile:" + output.outputFile

            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'

    //keep this comment-out in commit code.
//    compile project(':log')
    // sync with Readme.md
    compile 'org.bbs.android:log:0.6_rc3'

    androidTestCompile 'junit:junit:4.12'

    // Android Testing Support Library's runner and rules
    androidTestCompile 'com.android.support.test:runner:' + rootProject.ext.runnerVersion
    androidTestCompile 'com.android.support.test:rules:' + rootProject.ext.rulesVersion
    androidTestCompile 'com.android.support:support-annotations:23.3.0'
}

task t {
    android.applicationVariants.all { variant ->
        println "name: " + variant.name
        println "baseName: " + variant.baseName
        println "outputs: " + variant.outputs
        variant.metaClass.outputs.each { output ->
            output.metaClass.properties.each {println it.name }
        output.outputFile = new File("bysong.apk")
            println "output:" + output

            println "outputFile:" + output.outputFile

        }

//        variant.metaClass.properties.each {println it.name }
    }
}